const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");
const cheerio = require("cheerio");

function getDomain(url) {
	const regex = /^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:/\n]+)/im;
	const match = url.match(regex);
	return match ? match[1] : null;
}

module.exports = {
	config: {
		name: "event",
		version: "1.9",
		author: "NTKhang",
		countDown: 5,
		role: 2,
		description: {
			vi: "Qu·∫£n l√Ω c√°c t·ªáp l·ªánh event c·ªßa b·∫°n",
			en: "Manage your event command files"
		},
		category: "owner",
		guide: {
			vi: "{pn} load <t√™n file l·ªánh>"
				+ "\n{pn} loadAll"
				+ "\n{pn} install <url> <t√™n file l·ªánh>: T·∫£i v·ªÅ v√† load command event, url l√† ƒë∆∞·ªùng d·∫´n t·ªõi file l·ªánh (raw)"
				+ "\n{pn} install <code> <t√™n file l·ªánh>: T·∫£i v·ªÅ v√† load command event, code l√† m√£ c·ªßa file l·ªánh (raw)",
			en: "{pn} load <command file name>"
				+ "\n{pn} loadAll"
				+ "\n{pn} install <url> <command file name>: Download and load event command, url is the path to the command file (raw)"
				+ "\n{pn} install <code> <command file name>: Download and load event command, code is the code of the command file (raw)"
		}
	},

	langs: {
		vi: {
			missingFileName: "‚ö†Ô∏è | Vui l√≤ng nh·∫≠p v√†o t√™n l·ªánh b·∫°n mu·ªën reload",
			loaded: "‚úÖ | ƒê√£ load event command \"%1\" th√†nh c√¥ng",
			loadedError: "‚ùå | Load event command \"%1\" th·∫•t b·∫°i v·ªõi l·ªói\n%2: %3",
			loadedSuccess: "‚úÖ | ƒê√£ load th√†nh c√¥ng \"%1\" event command",
			loadedFail: "‚ùå | Load th·∫•t b·∫°i event command \"%1\"\n%2",
			missingCommandNameUnload: "‚ö†Ô∏è | Vui l√≤ng nh·∫≠p v√†o t√™n l·ªánh b·∫°n mu·ªën unload",
			unloaded: "‚úÖ | ƒê√£ unload event command \"%1\" th√†nh c√¥ng",
			unloadedError: "‚ùå | Unload event command \"%1\" th·∫•t b·∫°i v·ªõi l·ªói\n%2: %3",
			missingUrlCodeOrFileName: "‚ö†Ô∏è | Vui l√≤ng nh·∫≠p v√†o url ho·∫∑c code v√† t√™n file l·ªánh b·∫°n mu·ªën c√†i ƒë·∫∑t",
			missingUrlOrCode: "‚ö†Ô∏è | Vui l√≤ng nh·∫≠p v√†o url ho·∫∑c code c·ªßa t·ªáp l·ªánh b·∫°n mu·ªën c√†i ƒë·∫∑t",
			missingFileNameInstall: "‚ö†Ô∏è | Vui l√≤ng nh·∫≠p v√†o t√™n file ƒë·ªÉ l∆∞u l·ªánh (ƒëu√¥i .js)",
			invalidUrlOrCode: "‚ö†Ô∏è | Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c m√£ l·ªánh",
			alreadExist: "‚ö†Ô∏è | File l·ªánh ƒë√£ t·ªìn t·∫°i, b·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ghi ƒë√® l√™n file l·ªánh c≈© kh√¥ng?\nTh·∫£ c·∫£m x√∫c b·∫•t k√¨ v√†o tin nh·∫Øn n√†y ƒë·ªÉ ti·∫øp t·ª•c",
			installed: "‚úÖ | ƒê√£ c√†i ƒë·∫∑t event command \"%1\" th√†nh c√¥ng, file l·ªánh ƒë∆∞·ª£c l∆∞u t·∫°i %2",
			installedError: "‚ùå | C√†i ƒë·∫∑t event command \"%1\" th·∫•t b·∫°i v·ªõi l·ªói\n%2: %3",
			missingFile: "‚ö†Ô∏è | Kh√¥ng t√¨m th·∫•y t·ªáp l·ªánh \"%1\"",
			invalidFileName: "‚ö†Ô∏è | T√™n t·ªáp l·ªánh kh√¥ng h·ª£p l·ªá",
			unloadedFile: "‚úÖ | ƒê√£ unload l·ªánh \"%1\""
		},
		en: {
			missingFileName: "‚ö†Ô∏è | ùôëùôöùô™ùôûùô°ùô°ùôöùôØ ùôöùô£ùô©ùôßùôöùôß ùô°ùôö ùô£ùô§ùô¢ ùôôùôö ùô°ùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùô¶ùô™ùôö ùô´ùô§ùô™ùô® ùô®ùô§ùô™ùôùùôñùôûùô©ùôöùôØ ùôßùôöùôòùôùùôñùôßùôúùôöùôß üëª",
			loaded: "‚úÖ | ùôáùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© "%1" ùôñ √©ùô©√© ùôòùôùùôñùôßùôú√©ùôö ùôñùô´ùôöùôò ùô®ùô™ùôòùôò√®ùô® üëª",
			loadedError: "‚ùå | ùôáùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© ùôòùôùùôñùôßùôú√©ùôö "%1" ùôñ √©ùôòùôùùô§ùô™√© ùôñùô´ùôöùôò ùô™ùô£ùôö ùôöùôßùôßùôöùô™ùôß üëª\n%2: %3",
			loadedSuccess: "‚úÖ | ùôáùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© "%1" ùôñ √©ùô©√© ùôòùôùùôñùôßùôú√©ùôö ùôñùô´ùôöùôò ùô®ùô™ùôòùôò√®ùô® üëª",
			loadedFail: "‚ùå | ùôáùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëªùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© ùôòùôùùôñùôßùôú√©ùôö "%1" ùôñ √©ùôòùôùùô§ùô™√© üëª\n%2",
			missingCommandNameUnload: "‚ö†Ô∏è | ùôëùôöùô™ùôûùô°ùô°ùôöùôØ ùôöùô£ùô©ùôßùôöùôß ùô°ùôö ùô£ùô§ùô¢ ùôôùôö ùô°ùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö ùô¶ùô™ùôö ùô´ùô§ùô™ùô® ùô®ùô§ùô™ùôùùôñùôûùô©ùôöùôØ ùôô√©ùôòùôùùôñùôßùôúùôöùôß",
			unloaded: "‚úÖ | ùòæùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© ùôô√©ùôòùôùùôñùôßùôú√©ùôö "%1" ùôñùô´ùôöùôò ùô®ùô™ùôòùôò√®ùô® üëª",
			unloadedError: "‚ùå | ùôáùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© ùôô√©ùôòùôùùôñùôßùôú√©ùôö "%1" ùôñ √©ùôòùôùùô§ùô™√© ùôñùô´ùôöùôò ùô™ùô£ùôö ùôöùôßùôßùôöùô™ùôß üëª\n%2: %3",
			missingUrlCodeOrFileName: "‚ö†Ô∏è | ùôëùôöùô™ùôûùô°ùô°ùôöùôØ ùôöùô£ùô©ùôßùôöùôß ùô°'ùôêùôçùôá ùô§ùô™ ùô°ùôö ùôòùô§ùôôùôö ùôöùô© ùô°ùôö ùô£ùô§ùô¢ ùôôùô™ ùôõùôûùôòùôùùôûùôöùôß ùôôùôö ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö ùô¶ùô™ùôö ùô´ùô§ùô™ùô® ùô®ùô§ùô™ùôùùôñùôûùô©ùôöùôØ ùôûùô£ùô®ùô©ùôñùô°ùô°ùôöùôß",
			missingUrlOrCode: "‚ö†Ô∏è | ùôëùôöùô™ùôûùô°ùô°ùôöùôØ ùô®ùôñùôûùô®ùôûùôß ùô°'ùô™ùôßùô° ùô§ùô™ ùô°ùôö ùôòùô§ùôôùôö ùôôùô™ ùôõùôûùôòùôùùôûùôöùôß ùôôùôö ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùô¶ùô™ùôö ùô´ùô§ùô™ùô® ùô®ùô§ùô™ùôùùôñùôûùô©ùôöùôØ ùôûùô£ùô®ùô©ùôñùô°ùô°ùôöùôßüëª ùôôùôö ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª",
			missingFileNameInstall: "‚ö†Ô∏è | ùôëùôöùô™ùôûùô°ùô°ùôöùôØ ùô®ùôñùôûùô®ùôûùôß ùô°ùôö ùô£ùô§ùô¢ ùôôùô™ ùôõùôûùôòùôùùôûùôöùôß ùô•ùô§ùô™ùôß ùôöùô£ùôßùôöùôúùôûùô®ùô©ùôßùôöùôß ùô°ùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª (ùôñùô´ùôöùôò ùô°'ùôöùô≠ùô©ùôöùô£ùô®ùôûùô§ùô£ .ùôüùô®) üëª",
			invalidUrlOrCode: "‚ö†Ô∏è | ùôÑùô¢ùô•ùô§ùô®ùô®ùôûùôóùô°ùôö ùôô'ùô§ùôóùô©ùôöùô£ùôûùôß ùô°ùôö ùôòùô§ùôôùôö ùôôùôö ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª",
			alreadExist: "‚ö†Ô∏è | ùôáùôö ùôõùôûùôòùôùùôûùôöùôß ùôôùôö ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôöùô® ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö ùôöùô≠ùôûùô®ùô©ùôö ùôô√©ùôü√†, √™ùô©ùôöùô®-ùô´ùô§ùô™ùô® ùô®√ªùôß ùôôùôö ùô´ùô§ùô™ùô°ùô§ùôûùôß √©ùôòùôßùôñùô®ùôöùôß ùô°'ùôñùô£ùôòùôûùôöùô£ ùôõùôûùôòùôùùôûùôöùôß ùôôùôö ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôöùô®¬†üëª?\nùôç√©ùôñùôúùôûùô®ùô®ùôöùôØ √† ùôòùôö ùô¢ùôöùô®ùô®ùôñùôúùôö ùô•ùô§ùô™ùôß ùôòùô§ùô£ùô©ùôûùô£ùô™ùôöùôß üëª",
			installed: "‚úÖ | ùôáùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö ùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© "%1" ùôñ √©ùô©√© ùôûùô£ùô®ùô©ùôñùô°ùô°√©ùôö ùôñùô´ùôöùôò ùô®ùô™ùôòùôò√®ùô®, ùô°ùôö ùôõùôûùôòùôùùôûùôöùôß ùôôùôö ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôöùô®ùô© ùôöùô£ùôßùôöùôúùôûùô®ùô©ùôß√© ùô®ùô§ùô™ùô® %2 üëª",
			installedError: "‚ùå | ùôáùôñ ùôòùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùôô'√©ùô´√©ùô£ùôöùô¢ùôöùô£ùô© ùôûùô£ùô®ùô©ùôñùô°ùô°√©ùôö "%1" ùôñ √©ùôòùôùùô§ùô™√© ùôñùô´ùôöùôò ùô™ùô£ùôö ùôöùôßùôßùôöùô™ùôß üëª\n%2: %3",
			missingFile: "‚ö†Ô∏è | ùôÅùôûùôòùôùùôûùôöùôß "%1" ùôûùô£ùô©ùôßùô§ùô™ùô´ùôñùôóùô°ùôö ùôòùôùùôöùôØ ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª",
			invalidFileName: "‚ö†Ô∏è | ùôâùô§ùô¢ ùôôùôö ùôõùôûùôòùôùùôûùôöùôß ùô£ùô§ùô£ ùô´ùôñùô°ùôûùôôùôö ùôòùôùùôöùôØ ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª",
			unloadedFile: "‚úÖ | ùòæùô§ùô¢ùô¢ùôñùô£ùôôùôö ùôôùôö ùòæùôùùôßùôûùô®ùô©ùôöùô°ùô°ùôö üëª ùôô√©ùôòùôùùôñùôßùôú√©ùôö "%1" üëª"
		}
	},

	onStart: async ({ args, message, api, threadModel, userModel, dashBoardModel, globalModel, threadsData, usersData, dashBoardData, globalData, commandName, event, getLang }) => {
		const { configCommands } = global.GoatBot;
		const { log, loadScripts } = global.utils;

		if (args[0] == "load" && args.length == 2) {
			if (!args[1])
				return message.reply(getLang("missingFileName"));
			const infoLoad = loadScripts("events", args[1], log, configCommands, api, threadModel, userModel, dashBoardModel, globalModel, threadsData, usersData, dashBoardData, globalData, getLang);
			infoLoad.status == "success" ?
				message.reply(getLang("loaded", infoLoad.name)) :
				message.reply(getLang("loadedError", infoLoad.name, infoLoad.error, infoLoad.message));
		}
		else if ((args[0] || "").toLowerCase() == "loadall" || (args[0] == "load" && args.length > 2)) {
			const allFile = args[0].toLowerCase() == "loadall" ?
				fs.readdirSync(path.join(__dirname, "..", "events"))
					.filter(file =>
						file.endsWith(".js") &&
						!file.match(/(eg)\.js$/g) &&
						(process.env.NODE_ENV == "development" ? true : !file.match(/(dev)\.js$/g)) &&
						!configCommands.commandEventUnload?.includes(file)
					)
					.map(item => item = item.split(".")[0]) :
				args.slice(1);
			const arraySucces = [];
			const arrayFail = [];
			for (const fileName of allFile) {
				const infoLoad = loadScripts("events", fileName, log, configCommands, api, threadModel, userModel, dashBoardModel, globalModel, threadsData, usersData, dashBoardData, globalData, getLang);
				infoLoad.status == "success" ?
					arraySucces.push(fileName) :
					arrayFail.push(`${fileName} => ${infoLoad.error.name}: ${infoLoad.error.message}`);
			}
			let msg = "";
			if (arraySucces.length > 0)
				msg += getLang("loadedSuccess", arraySucces.length) + '\n';
			if (arrayFail.length > 0)
				msg += (msg ? '\n' : '') + getLang("loadedFail", arrayFail.length, "‚ùó" + arrayFail.join("\n‚ùó "));
			message.reply(msg);
		}
		else if (args[0] == "unload") {
			if (!args[1])
				return message.reply(getLang("missingCommandNameUnload"));
			const infoUnload = global.utils.unloadScripts("events", args[1], configCommands, getLang);
			infoUnload.status == "success" ?
				message.reply(getLang("unloaded", infoUnload.name)) :
				message.reply(getLang("unloadedError", infoUnload.name, infoUnload.error.name, infoUnload.error.message));
		}
		else if (args[0] == "install") {
			let url = args[1];
			let fileName = args[2];
			let rawCode;

			if (!url || !fileName)
				return message.reply(getLang("missingUrlCodeOrFileName"));

			if (url.endsWith(".js")) {
				const tmp = fileName;
				fileName = url;
				url = tmp;
			}

			if (url.match(/(https?:\/\/(?:www\.|(?!www)))/)) {
				if (!fileName || !fileName.endsWith(".js"))
					return message.reply(getLang("missingFileNameInstall"));

				const domain = getDomain(url);
				if (!domain)
					return message.reply(getLang("invalidUrl"));

				if (domain == "pastebin.com") {
					const regex = /https:\/\/pastebin\.com\/(?!raw\/)(.*)/;
					if (url.match(regex))
						url = url.replace(regex, "https://pastebin.com/raw/$1");
					if (url.endsWith("/"))
						url = url.slice(0, -1);
				}
				else if (domain == "github.com") {
					const regex = /https:\/\/github\.com\/(.*)\/blob\/(.*)/;
					if (url.match(regex))
						url = url.replace(regex, "https://raw.githubusercontent.com/$1/$2");
				}

				rawCode = (await axios.get(url)).data;

				if (domain == "savetext.net") {
					const $ = cheerio.load(rawCode);
					rawCode = $("#content").text();
				}
			}
			else {
				if (args[args.length - 1].endsWith(".js")) {
					fileName = args[args.length - 1];
					rawCode = event.body.slice(event.body.indexOf('install') + 7, event.body.indexOf(fileName) - 1);
				}
				else if (args[1].endsWith(".js")) {
					fileName = args[1];
					rawCode = event.body.slice(event.body.indexOf(fileName) + fileName.length + 1);
				}
				else
					return message.reply(getLang("missingFileNameInstall"));
			}
			if (!rawCode)
				return message.reply(getLang("invalidUrlOrCode"));
			if (fs.existsSync(path.join(__dirname, "..", "events", fileName)))
				return message.reply(getLang("alreadExist"), (err, info) => {
					global.GoatBot.onReaction.set(info.messageID, {
						commandName,
						messageID: info.messageID,
						type: "install",
						author: event.senderID,
						data: {
							fileName,
							rawCode
						}
					});
				});
			else {
				const infoLoad = loadScripts("events", fileName, log, configCommands, api, threadModel, userModel, dashBoardModel, globalModel, threadsData, usersData, dashBoardData, globalData, getLang, rawCode);
				infoLoad.status == "success" ?
					message.reply(getLang("installed", infoLoad.name, path.join(__dirname, fileName).replace(process.cwd(), ""))) :
					message.reply(getLang("installedError", infoLoad.name, infoLoad.error.name, infoLoad.error.message));
			}
		}
		else
			message.SyntaxError();
	},

	onReaction: async function ({ Reaction, message, event, api, threadModel, userModel, dashBoardModel, globalModel, threadsData, usersData, dashBoardData, globalData, getLang }) {
		const { author, messageID, data: { fileName, rawCode } } = Reaction;
		if (event.userID != author)
			return;
		const { configCommands } = global.GoatBot;
		const { log, loadScripts } = global.utils;
		const infoLoad = loadScripts("cmds", fileName, log, configCommands, api, threadModel, userModel, dashBoardModel, globalModel, threadsData, usersData, dashBoardData, globalData, getLang, rawCode);
		infoLoad.status == "success" ?
			message.reply(getLang("installed", infoLoad.name, path.join(__dirname, '..', 'events', fileName).replace(process.cwd(), ""), () => message.unsend(messageID))) :
			message.reply(getLang("installedError", infoLoad.name, infoLoad.error.name, infoLoad.error.message, () => message.unsend(messageID)));
	}
};
